// =======================================================
// üå≥ √ÅRVORES BIN√ÅRIAS ‚Äî EXPLICA√á√ÉO GERAL
// =======================================================

/*
Uma √ÅRVORE BIN√ÅRIA √© uma estrutura de dados hier√°rquica,
formada por N√ìS conectados, onde:

- Cada n√≥ pode ter no m√°ximo 2 FILHOS:
  ‚Üí Um √† esquerda (left)
  ‚Üí Um √† direita (right)

O primeiro n√≥ da √°rvore √© chamado de RAIZ (root).

Regras principais:
1. O n√≥ √† esquerda sempre possui valor MENOR que o pai.
2. O n√≥ √† direita sempre possui valor MAIOR que o pai.

Exemplo visual:
            15
           /  \
         10    20
        / \    / \
       8  12  18  25

Cada valor √© um n√≥, e todos seguem a regra de ordem bin√°ria.
*/

// =======================================================
// üîπ INSER√á√ÉO DE UM NOVO N√ì
// =======================================================

/*
1. Come√ßamos a partir da raiz (this.root).
2. Se a √°rvore estiver vazia (root === null),
   o novo n√≥ se torna a raiz.
3. Caso contr√°rio:
   - Se o valor for menor, vamos para a esquerda (node.left)
   - Se o valor for maior, vamos para a direita (node.right)
4. O processo se repete de forma RECURSIVA,
   at√© encontrar um espa√ßo vazio (null).

Esse comportamento garante que a √°rvore fique sempre ordenada.
*/

// =======================================================
// üîπ PERCURSOS (TRAVESSIAS) DA √ÅRVORE
// =======================================================

/*
Percorrer uma √°rvore significa visitar todos os n√≥s
em uma determinada ordem. Existem tr√™s percursos principais:

-----------------------------------------------------------
1Ô∏è‚É£ IN-ORDER (Em Ordem)
-----------------------------------------------------------
- Percorre na sequ√™ncia: ESQUERDA ‚Üí RAIZ ‚Üí DIREITA
- Resulta em uma sa√≠da ORDENADA (crescente).
- Muito usado para listar os valores em ordem num√©rica.

Exemplo:
    inOrder(raiz):
        8 ‚Üí 10 ‚Üí 12 ‚Üí 15 ‚Üí 18 ‚Üí 20 ‚Üí 25
*/

inOrder(node = this.root) {
    if (node !== null) {
        this.inOrder(node.left);   // visita a sub√°rvore esquerda
        console.log(node.value);   // visita o n√≥ atual
        this.inOrder(node.right);  // visita a sub√°rvore direita
    }
};

/*
-----------------------------------------------------------
2Ô∏è‚É£ PRE-ORDER (Pr√© Ordem)
-----------------------------------------------------------
- Percorre na sequ√™ncia: RAIZ ‚Üí ESQUERDA ‚Üí DIREITA
- √ötil para copiar ou exportar a estrutura da √°rvore.
- Visita primeiro o n√≥ atual, depois seus filhos.

Exemplo:
    preOrder(raiz):
        15 ‚Üí 10 ‚Üí 8 ‚Üí 12 ‚Üí 20 ‚Üí 18 ‚Üí 25
*/

preOrder(node = this.root) {
    if (node !== null) {
        console.log(node.value);   // visita o n√≥ atual primeiro
        this.preOrder(node.left);  // depois a esquerda
        this.preOrder(node.right); // depois a direita
    }
};

/*
-----------------------------------------------------------
3Ô∏è‚É£ POST-ORDER (P√≥s Ordem)
-----------------------------------------------------------
- Percorre na sequ√™ncia: ESQUERDA ‚Üí DIREITA ‚Üí RAIZ
- Usado em casos onde voc√™ quer DELETAR ou PROCESSAR
  todos os filhos antes do pai.

Exemplo:
    postOrder(raiz):
        8 ‚Üí 12 ‚Üí 10 ‚Üí 18 ‚Üí 25 ‚Üí 20 ‚Üí 15
*/

postOrder(node = this.root) {
    if (node !== null) {
        this.postOrder(node.left);   // visita esquerda primeiro
        this.postOrder(node.right);  // depois direita
        console.log(node.value);     // por √∫ltimo o n√≥ atual
    }
};

// =======================================================
// üîπ BUSCA DE UM ELEMENTO
// =======================================================

/*
A busca segue o mesmo princ√≠pio da inser√ß√£o:

1. Come√ßa pela raiz.
2. Se o valor for igual ao n√≥ atual ‚Üí Encontrado!
3. Se o valor for menor ‚Üí procurar √† esquerda.
4. Se o valor for maior ‚Üí procurar √† direita.
5. Se o n√≥ for null ‚Üí valor n√£o est√° na √°rvore.

Esse processo √© r√°pido, pois a √°rvore elimina metade
das possibilidades a cada compara√ß√£o (log n).
*/

// =======================================================
// üîπ REMO√á√ÉO DE UM N√ì
// =======================================================

/*
A remo√ß√£o possui 3 casos poss√≠veis:

1Ô∏è‚É£ N√≥ sem filhos ‚Üí basta remover (setar null)
2Ô∏è‚É£ N√≥ com 1 filho ‚Üí substitui o n√≥ pelo seu filho
3Ô∏è‚É£ N√≥ com 2 filhos ‚Üí
    - Encontra o menor valor da sub√°rvore direita (sucessor)
    - Substitui o valor do n√≥ a ser removido pelo sucessor
    - Remove o sucessor da posi√ß√£o original
*/

// =======================================================
// üîπ ALTURA E TAMANHO
// =======================================================

/*
- ALTURA: maior caminho da raiz at√© uma folha.
- TAMANHO (countNodes): n√∫mero total de n√≥s.

Ambos podem ser calculados com recurs√£o:
‚Üí cada chamada soma 1 e desce √† esquerda e √† direita.
*/

// =======================================================
// üîπ CONCLUS√ÉO
// =======================================================

/*
‚úîÔ∏è A √°rvore bin√°ria organiza dados de forma hier√°rquica.
‚úîÔ∏è Permite inser√ß√£o, busca e remo√ß√£o eficientes (O(log n)).
‚úîÔ∏è Os percursos determinam a forma como os dados s√£o visitados.
‚úîÔ∏è Cada n√≥ √© independente e conectado apenas a dois filhos.
*/

// =======================================================
